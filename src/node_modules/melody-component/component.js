/**
 * Copyright 2017 trivago N.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component } from 'preact';
import { mixin } from './mixin';
import { setProps, RECEIVE_PROPS } from './actions';
import shallowEquals from './shallowEquals';

function MelodyComponent(props, context, reducer) {
    Component.call(this, props, context);
    this.refs = {};
    this.state = reducer(
        reducer(undefined, {
            type: 'MELODY/@@INIT',
        }),
        setProps(props, this)
    );
    this.reducer = reducer;
    this.componentDidInitialize();
}

MelodyComponent.prototype = Object.create(Component.prototype, {
    constructor: { value: MelodyComponent },
});

Object.assign(MelodyComponent.prototype, {
    get el() {
        // Preact hack to get the element associated with this component
        return this.__P;
    },

    getState() {
        return this.state;
    },

    dispatch(action) {
        this.setState(oldState => this.reducer(oldState, action));
    },

    componentWillReceiveProps(props) {
        if (!shallowEquals(props, this.props)) {
            this.props = props;
            this.apply(props);
        }
    },

    shouldComponentUpdate(props, nextState) {
        return !shallowEquals(this.state, nextState);
    },

    componentDidUpdate() {
        this.notify();
    },

    componentDidMount() {
        this.notify();
    },

    // compatibility with Melody
    // this should create full compat with melody-hoc
    apply(props) {
        this.dispatch(setProps(props, this));
    },

    // this is needed for redux-middleware compatibility
    componentDidInitialize() {},

    // TODO: Do we need this?
    notify() {},
});

function mapPropsToState(state, action) {
    return action.type === RECEIVE_PROPS ? action.payload : state || {};
}

function createComponentConstructor(Parent, parentReducer) {
    function ChildComponent(props, context, reducer) {
        if (!this || !(this instanceof ChildComponent)) {
            const EnhancedChild = createComponentConstructor(
                ChildComponent,
                parentReducer
            );
            for (let i = 0, len = arguments.length; i < len; i++) {
                mixin(EnhancedChild, arguments[i]);
            }
            return EnhancedChild;
        }
        Parent.call(this, props, context, reducer || parentReducer);
    }
    ChildComponent.prototype = Object.create(Parent.prototype, {
        constructor: { value: ChildComponent },
    });
    return ChildComponent;
}

export function createComponent(templateFnOrObj, reducer) {
    const template = templateFnOrObj.render
        ? props => templateFnOrObj.render(props)
        : templateFnOrObj;
    const finalReducer = reducer || mapPropsToState;
    const ChildComponent = createComponentConstructor(
        MelodyComponent,
        finalReducer
    );
    ChildComponent.prototype.displayName =
        template.name || template.displayName || 'Unknown';
    ChildComponent.prototype.render = function(props, state, context) {
        return template(state);
    };
    for (let i = 2, len = arguments.length; i < len; i++) {
        mixin(ChildComponent, arguments[i]);
    }
    return ChildComponent;
}
